mysql:
  domain: analytics.db.svc.eqiad.wmflabs
  # TODO: remove this when the multiinstance replica proxy is removed
  host: enwiki.analytics.db.svc.eqiad.wmflabs
dbProxy: 
  image:
    tag: latest
# So that we don't use the Bitnami charts in Cloud VPS deployment
localdev:
  enabled: false
jupyterhub:
  ingress: 
    enabled: true
    hosts:
    - hub.paws.wmcloud.org
  singleuser:
    extraEnv:
      HUB_DOMAIN: "hub.paws.wmcloud.org"  # Check jupyterhub.ingress.hosts
  hub:
    db:
      type: mysql
      upgrade: true
    extraVolumes:
    - name: homes
      nfs:
        server: nfs-tools-project.svc.eqiad.wmnet
        path: /srv/misc/shared/paws/project
    - name: dumps
      nfs:
        server: labstore1007.wikimedia.org
        path: /
    # Without this, dumps becomes inaccessible and can hang the host
    - name: dumps-src1
      nfs:
        server: labstore1007.wikimedia.org
        path: /
    - name: dumps-src2
      nfs:
        server: labstore1006.wikimedia.org
        path: /
    extraConfig:
      myConfig: |
          import hmac
          import hashlib
          import subprocess
          import os
          import json
          from oauthenticator.mediawiki import MWOAuthenticator
          from tornado import gen

          from tornado.escape import url_escape
          from tornado.httpclient import AsyncHTTPClient


          class Auth(MWOAuthenticator):
              enable_auth_state = True
              def normalize_username(self, username):
                  return username

              async def refresh_user(self, user, handler=None):
                  client = AsyncHTTPClient()
                  try:
                      response = await client.fetch(f"https://meta.wikimedia.org/w/api.php?action=query&format=json&formatversion=2&meta=globaluserinfo&guiuser={url_escape(user.name)}",
                                                     user_agent="PAWS-authenticator/0.1 (https://phabricator.wikimedia.org/tag/paws/)" )
                      locked = bool(json.loads(response.body)['query']['globaluserinfo'].get("locked", False))
                      if locked:
                          await user.spawner.stop(now=True)
                          return False
                      else:
                          return True
                  except Exception as e:
                      self.log.error(f"Error checking for Wikimedia lock on user {user.name}: {e}")
                      return False  # Notebook cookies keep user logged in

              @gen.coroutine
              def pre_spawn_start(self, user, spawner):
                  auth_state = yield user.get_auth_state()
                  identity = auth_state['MEDIAWIKI_USER_IDENTITY']
                  spawner.environment['ACCESS_KEY'] = auth_state['ACCESS_TOKEN_KEY']
                  spawner.environment['ACCESS_SECRET'] = auth_state['ACCESS_TOKEN_SECRET']
                  spawner.environment['CLIENT_ID'] = self.client_id
                  spawner.environment['CLIENT_SECRET'] = self.client_secret
                  spawner.environment['USER'] = identity['username']
                  # Set rather than use .extend!
                  # Since otherwise the volumes list will grow each time
                  # the spawner stops and starts!
                  homedir = '/data/project/paws/userhomes/{}'.format(identity['sub'])
                  homemnt = '/mnt/project/paws/userhomes/{}'.format(identity['sub'])
                  # Create the homedir so docker doesn't do it as root
                  os.makedirs(homedir, mode=0o755, exist_ok=True)
                  spawner.volumes = [
                      {
                          'name': 'home',
                          'nfs': { 'server': 'nfs-tools-project.svc.eqiad.wmnet', 'path': homenfs }
                      },
                      {
                          'name': 'dumps',
                          'nfs': { 'server': 'labstore1007.wikimedia.org', 'path': '/' }
                      },
                      {
                          'name': 'dumps-src1',
                          'nfs': { 'server': 'labstore1007.wikimedia.org', 'path': '/' }
                      },
                      {
                          'name': 'dumps-src2',
                          'nfs': { 'server': 'labstore1006.wikimedia.org', 'path': '/' }
                      }
                  ]
                  spawner.volume_mounts = [
                      {
                          'name': 'home',
                          'mountPath': '/home/paws'
                      },
                      {
                          'name': 'dumps',
                          'mountPath': '/public/dumps',
                          'readOnly': True
                      },
                      {
                          'name': 'dumps-src1',
                          'mountPath': '/mnt/nfs/dumps-labstore1007.wikimedia.org',
                          'readOnly': True

                      },
                      {
                          'name': 'dumps-src2',
                          'mountPath': '/mnt/nfs/dumps-labstore1006.wikimedia.org',
                          'readOnly': True

                      },
                  ]

                  spawner.environment['MYSQL_HOST'] = os.environ['MYSQL_SERVICE_HOST']
                  mysql_password = hmac.new(
                      os.environ['MYSQL_HMAC_KEY'].encode('utf-8'),
                      identity['username'].encode('utf-8'),
                      hashlib.sha256
                  ).hexdigest()
                  spawner.environment['MYSQL_USERNAME'] = identity['username']
                  spawner.environment['MYSQL_PASSWORD'] = mysql_password

          c.JupyterHub.authenticator_class = Auth
          c.JupyterHub.authenticate_prometheus = False
          c.JupyterHub.logo_file = '/srv/jupyterhub/PAWS.svg'
          c.JupyterHub.template_vars = {
              'announcement': ('<span class="alert-success">'
                              'Welcome to PAWS. '
                              'Please <a href="//phabricator.wikimedia.org/tag'
                              '/paws/"> report any issues on Phabricator </a>'
                              '</span>')
          }
